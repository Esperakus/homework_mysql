resource "yandex_compute_instance" "innodb" {
  count    = 3
  name     = "innodb${count.index}"
  hostname = "innodb${count.index}"

  resources {
    cores  = 2
    memory = 2
  }

  boot_disk {
    initialize_params {
      image_id = var.image_id
    }
  }

  network_interface {
    subnet_id = yandex_vpc_subnet.subnet01.id
    nat       = true
  }

  metadata = {
    ssh-keys = "cloud-user:${file("~/.ssh/id_rsa.pub")}"
    #    user-data = "${file("user_data.txt")}"
  }

  connection {
    type        = "ssh"
    user        = "cloud-user"
    private_key = file("~/.ssh/id_rsa")
    host        = self.network_interface.0.nat_ip_address
  }

  provisioner "remote-exec" {
    inline = [
      "echo 'VM is ready!'"
      #   "sudo dnf -y install epel-release",
      #   "sudo dnf -y update",
      #   "sudo dnf -y install https://repo.mysql.com/mysql80-community-release-el8-3.noarch.rpm",
      #   "sudo dnf -qy module disable mysql",
      #   "sudo dnf install -y mysql-community-server",
      #   "sudo setsebool -P mysql_connect_any 1",
      #   "systemctl enable --now mysqld"
    ]

  }

  provisioner "local-exec" {
    command = "ansible-playbook -u cloud-user -i '${self.network_interface.0.nat_ip_address},' ./ansible/playbooks/main.yml"
  }
}

resource "yandex_vpc_network" "net01" {
  name = "net01"
}

resource "yandex_vpc_subnet" "subnet01" {
  name           = "subnet1"
  zone           = var.zone
  network_id     = yandex_vpc_network.net01.id
  v4_cidr_blocks = ["192.168.100.0/24"]
}

output "internal_ip_address_vm_1" {
  value = yandex_compute_instance.innodb.*.network_interface.0.ip_address
}

output "external_ip_address_vm_1" {
  value = yandex_compute_instance.innodb.*.network_interface.0.nat_ip_address
}